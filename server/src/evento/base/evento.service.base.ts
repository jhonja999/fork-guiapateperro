/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Evento as PrismaEvento,
  Listing as PrismaListing,
  User as PrismaUser,
} from "@prisma/client";

export class EventoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EventoCountArgs, "select">): Promise<number> {
    return this.prisma.evento.count(args);
  }

  async eventos<T extends Prisma.EventoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventoFindManyArgs>
  ): Promise<PrismaEvento[]> {
    return this.prisma.evento.findMany<Prisma.EventoFindManyArgs>(args);
  }
  async evento<T extends Prisma.EventoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventoFindUniqueArgs>
  ): Promise<PrismaEvento | null> {
    return this.prisma.evento.findUnique(args);
  }
  async createEvento<T extends Prisma.EventoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventoCreateArgs>
  ): Promise<PrismaEvento> {
    return this.prisma.evento.create<T>(args);
  }
  async updateEvento<T extends Prisma.EventoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventoUpdateArgs>
  ): Promise<PrismaEvento> {
    return this.prisma.evento.update<T>(args);
  }
  async deleteEvento<T extends Prisma.EventoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventoDeleteArgs>
  ): Promise<PrismaEvento> {
    return this.prisma.evento.delete(args);
  }

  async getListing(parentId: string): Promise<PrismaListing | null> {
    return this.prisma.evento
      .findUnique({
        where: { id: parentId },
      })
      .listing();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.evento
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
