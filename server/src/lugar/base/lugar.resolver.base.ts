/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Lugar } from "./Lugar";
import { LugarCountArgs } from "./LugarCountArgs";
import { LugarFindManyArgs } from "./LugarFindManyArgs";
import { LugarFindUniqueArgs } from "./LugarFindUniqueArgs";
import { CreateLugarArgs } from "./CreateLugarArgs";
import { UpdateLugarArgs } from "./UpdateLugarArgs";
import { DeleteLugarArgs } from "./DeleteLugarArgs";
import { Listing } from "../../listing/base/Listing";
import { User } from "../../user/base/User";
import { LugarService } from "../lugar.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Lugar)
export class LugarResolverBase {
  constructor(
    protected readonly service: LugarService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Lugar",
    action: "read",
    possession: "any",
  })
  async _lugarsMeta(
    @graphql.Args() args: LugarCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Lugar])
  @nestAccessControl.UseRoles({
    resource: "Lugar",
    action: "read",
    possession: "any",
  })
  async lugars(@graphql.Args() args: LugarFindManyArgs): Promise<Lugar[]> {
    return this.service.lugars(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Lugar, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Lugar",
    action: "read",
    possession: "own",
  })
  async lugar(
    @graphql.Args() args: LugarFindUniqueArgs
  ): Promise<Lugar | null> {
    const result = await this.service.lugar(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lugar)
  @nestAccessControl.UseRoles({
    resource: "Lugar",
    action: "create",
    possession: "any",
  })
  async createLugar(@graphql.Args() args: CreateLugarArgs): Promise<Lugar> {
    return await this.service.createLugar({
      ...args,
      data: {
        ...args.data,

        listing: args.data.listing
          ? {
              connect: args.data.listing,
            }
          : undefined,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lugar)
  @nestAccessControl.UseRoles({
    resource: "Lugar",
    action: "update",
    possession: "any",
  })
  async updateLugar(
    @graphql.Args() args: UpdateLugarArgs
  ): Promise<Lugar | null> {
    try {
      return await this.service.updateLugar({
        ...args,
        data: {
          ...args.data,

          listing: args.data.listing
            ? {
                connect: args.data.listing,
              }
            : undefined,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lugar)
  @nestAccessControl.UseRoles({
    resource: "Lugar",
    action: "delete",
    possession: "any",
  })
  async deleteLugar(
    @graphql.Args() args: DeleteLugarArgs
  ): Promise<Lugar | null> {
    try {
      return await this.service.deleteLugar(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Listing, {
    nullable: true,
    name: "listing",
  })
  @nestAccessControl.UseRoles({
    resource: "Listing",
    action: "read",
    possession: "any",
  })
  async getListing(@graphql.Parent() parent: Lugar): Promise<Listing | null> {
    const result = await this.service.getListing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Lugar): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
