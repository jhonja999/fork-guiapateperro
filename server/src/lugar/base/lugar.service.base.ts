/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Lugar as PrismaLugar,
  Listing as PrismaListing,
  User as PrismaUser,
} from "@prisma/client";

export class LugarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LugarCountArgs, "select">): Promise<number> {
    return this.prisma.lugar.count(args);
  }

  async lugars<T extends Prisma.LugarFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LugarFindManyArgs>
  ): Promise<PrismaLugar[]> {
    return this.prisma.lugar.findMany<Prisma.LugarFindManyArgs>(args);
  }
  async lugar<T extends Prisma.LugarFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LugarFindUniqueArgs>
  ): Promise<PrismaLugar | null> {
    return this.prisma.lugar.findUnique(args);
  }
  async createLugar<T extends Prisma.LugarCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LugarCreateArgs>
  ): Promise<PrismaLugar> {
    return this.prisma.lugar.create<T>(args);
  }
  async updateLugar<T extends Prisma.LugarUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LugarUpdateArgs>
  ): Promise<PrismaLugar> {
    return this.prisma.lugar.update<T>(args);
  }
  async deleteLugar<T extends Prisma.LugarDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LugarDeleteArgs>
  ): Promise<PrismaLugar> {
    return this.prisma.lugar.delete(args);
  }

  async getListing(parentId: string): Promise<PrismaListing | null> {
    return this.prisma.lugar
      .findUnique({
        where: { id: parentId },
      })
      .listing();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.lugar
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
