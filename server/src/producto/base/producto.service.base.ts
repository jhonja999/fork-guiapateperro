/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Producto as PrismaProducto,
  Listing as PrismaListing,
  User as PrismaUser,
} from "@prisma/client";

export class ProductoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProductoCountArgs, "select">): Promise<number> {
    return this.prisma.producto.count(args);
  }

  async productos<T extends Prisma.ProductoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductoFindManyArgs>
  ): Promise<PrismaProducto[]> {
    return this.prisma.producto.findMany<Prisma.ProductoFindManyArgs>(args);
  }
  async producto<T extends Prisma.ProductoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductoFindUniqueArgs>
  ): Promise<PrismaProducto | null> {
    return this.prisma.producto.findUnique(args);
  }
  async createProducto<T extends Prisma.ProductoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductoCreateArgs>
  ): Promise<PrismaProducto> {
    return this.prisma.producto.create<T>(args);
  }
  async updateProducto<T extends Prisma.ProductoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductoUpdateArgs>
  ): Promise<PrismaProducto> {
    return this.prisma.producto.update<T>(args);
  }
  async deleteProducto<T extends Prisma.ProductoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductoDeleteArgs>
  ): Promise<PrismaProducto> {
    return this.prisma.producto.delete(args);
  }

  async getListing(parentId: string): Promise<PrismaListing | null> {
    return this.prisma.producto
      .findUnique({
        where: { id: parentId },
      })
      .listing();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.producto
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
